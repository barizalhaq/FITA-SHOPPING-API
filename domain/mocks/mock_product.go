// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/product.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/barizalhaq/fita_shopping_api/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockProductUsecaseInterface is a mock of ProductUsecaseInterface interface.
type MockProductUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProductUsecaseInterfaceMockRecorder
}

// MockProductUsecaseInterfaceMockRecorder is the mock recorder for MockProductUsecaseInterface.
type MockProductUsecaseInterfaceMockRecorder struct {
	mock *MockProductUsecaseInterface
}

// NewMockProductUsecaseInterface creates a new mock instance.
func NewMockProductUsecaseInterface(ctrl *gomock.Controller) *MockProductUsecaseInterface {
	mock := &MockProductUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockProductUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductUsecaseInterface) EXPECT() *MockProductUsecaseInterfaceMockRecorder {
	return m.recorder
}

// ListProducts mocks base method.
func (m *MockProductUsecaseInterface) ListProducts() ([]domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProducts")
	ret0, _ := ret[0].([]domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProducts indicates an expected call of ListProducts.
func (mr *MockProductUsecaseInterfaceMockRecorder) ListProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProducts", reflect.TypeOf((*MockProductUsecaseInterface)(nil).ListProducts))
}

// MockProductRepositoryInterface is a mock of ProductRepositoryInterface interface.
type MockProductRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepositoryInterfaceMockRecorder
}

// MockProductRepositoryInterfaceMockRecorder is the mock recorder for MockProductRepositoryInterface.
type MockProductRepositoryInterfaceMockRecorder struct {
	mock *MockProductRepositoryInterface
}

// NewMockProductRepositoryInterface creates a new mock instance.
func NewMockProductRepositoryInterface(ctrl *gomock.Controller) *MockProductRepositoryInterface {
	mock := &MockProductRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockProductRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepositoryInterface) EXPECT() *MockProductRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetProductByID mocks base method.
func (m *MockProductRepositoryInterface) GetProductByID(id uint64) (*domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", id)
	ret0, _ := ret[0].(*domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockProductRepositoryInterfaceMockRecorder) GetProductByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockProductRepositoryInterface)(nil).GetProductByID), id)
}

// GetProducts mocks base method.
func (m *MockProductRepositoryInterface) GetProducts() ([]domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts")
	ret0, _ := ret[0].([]domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockProductRepositoryInterfaceMockRecorder) GetProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockProductRepositoryInterface)(nil).GetProducts))
}

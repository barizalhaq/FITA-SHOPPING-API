// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/cart.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/barizalhaq/fita_shopping_api/domain"
	gModel "github.com/barizalhaq/fita_shopping_api/graph/gModel"
	gomock "github.com/golang/mock/gomock"
)

// MockCartUsecaseInterface is a mock of CartUsecaseInterface interface.
type MockCartUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCartUsecaseInterfaceMockRecorder
}

// MockCartUsecaseInterfaceMockRecorder is the mock recorder for MockCartUsecaseInterface.
type MockCartUsecaseInterfaceMockRecorder struct {
	mock *MockCartUsecaseInterface
}

// NewMockCartUsecaseInterface creates a new mock instance.
func NewMockCartUsecaseInterface(ctrl *gomock.Controller) *MockCartUsecaseInterface {
	mock := &MockCartUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockCartUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartUsecaseInterface) EXPECT() *MockCartUsecaseInterfaceMockRecorder {
	return m.recorder
}

// AddProducts mocks base method.
func (m *MockCartUsecaseInterface) AddProducts(user domain.User, input gModel.EncartInput) (*domain.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProducts", user, input)
	ret0, _ := ret[0].(*domain.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProducts indicates an expected call of AddProducts.
func (mr *MockCartUsecaseInterfaceMockRecorder) AddProducts(user, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProducts", reflect.TypeOf((*MockCartUsecaseInterface)(nil).AddProducts), user, input)
}

// Checkout mocks base method.
func (m *MockCartUsecaseInterface) Checkout(user domain.User) (*domain.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkout", user)
	ret0, _ := ret[0].(*domain.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Checkout indicates an expected call of Checkout.
func (mr *MockCartUsecaseInterfaceMockRecorder) Checkout(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkout", reflect.TypeOf((*MockCartUsecaseInterface)(nil).Checkout), user)
}

// Decart mocks base method.
func (m *MockCartUsecaseInterface) Decart(user domain.User, input gModel.DecartInput) (*domain.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decart", user, input)
	ret0, _ := ret[0].(*domain.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decart indicates an expected call of Decart.
func (mr *MockCartUsecaseInterfaceMockRecorder) Decart(user, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decart", reflect.TypeOf((*MockCartUsecaseInterface)(nil).Decart), user, input)
}

// DecreaseQty mocks base method.
func (m *MockCartUsecaseInterface) DecreaseQty(user domain.User, input gModel.DecreaseCartProductQtyInput) (*domain.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecreaseQty", user, input)
	ret0, _ := ret[0].(*domain.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecreaseQty indicates an expected call of DecreaseQty.
func (mr *MockCartUsecaseInterfaceMockRecorder) DecreaseQty(user, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecreaseQty", reflect.TypeOf((*MockCartUsecaseInterface)(nil).DecreaseQty), user, input)
}

// ViewCart mocks base method.
func (m *MockCartUsecaseInterface) ViewCart(user domain.User) (*domain.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewCart", user)
	ret0, _ := ret[0].(*domain.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewCart indicates an expected call of ViewCart.
func (mr *MockCartUsecaseInterfaceMockRecorder) ViewCart(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewCart", reflect.TypeOf((*MockCartUsecaseInterface)(nil).ViewCart), user)
}

// MockCartRepositoryInterface is a mock of CartRepositoryInterface interface.
type MockCartRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCartRepositoryInterfaceMockRecorder
}

// MockCartRepositoryInterfaceMockRecorder is the mock recorder for MockCartRepositoryInterface.
type MockCartRepositoryInterfaceMockRecorder struct {
	mock *MockCartRepositoryInterface
}

// NewMockCartRepositoryInterface creates a new mock instance.
func NewMockCartRepositoryInterface(ctrl *gomock.Controller) *MockCartRepositoryInterface {
	mock := &MockCartRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockCartRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartRepositoryInterface) EXPECT() *MockCartRepositoryInterfaceMockRecorder {
	return m.recorder
}

// AddProducts mocks base method.
func (m *MockCartRepositoryInterface) AddProducts(user *domain.User, items map[domain.Product]int) (*domain.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProducts", user, items)
	ret0, _ := ret[0].(*domain.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProducts indicates an expected call of AddProducts.
func (mr *MockCartRepositoryInterfaceMockRecorder) AddProducts(user, items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProducts", reflect.TypeOf((*MockCartRepositoryInterface)(nil).AddProducts), user, items)
}

// Create mocks base method.
func (m *MockCartRepositoryInterface) Create(user *domain.User) (*domain.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user)
	ret0, _ := ret[0].(*domain.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCartRepositoryInterfaceMockRecorder) Create(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCartRepositoryInterface)(nil).Create), user)
}

// RemoveProducts mocks base method.
func (m *MockCartRepositoryInterface) RemoveProducts(user *domain.User, productIds []int) (*domain.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveProducts", user, productIds)
	ret0, _ := ret[0].(*domain.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveProducts indicates an expected call of RemoveProducts.
func (mr *MockCartRepositoryInterfaceMockRecorder) RemoveProducts(user, productIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProducts", reflect.TypeOf((*MockCartRepositoryInterface)(nil).RemoveProducts), user, productIds)
}

// SubtractProducts mocks base method.
func (m *MockCartRepositoryInterface) SubtractProducts(user *domain.User, items map[domain.Product]int) (*domain.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubtractProducts", user, items)
	ret0, _ := ret[0].(*domain.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubtractProducts indicates an expected call of SubtractProducts.
func (mr *MockCartRepositoryInterfaceMockRecorder) SubtractProducts(user, items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubtractProducts", reflect.TypeOf((*MockCartRepositoryInterface)(nil).SubtractProducts), user, items)
}

// View mocks base method.
func (m *MockCartRepositoryInterface) View(user *domain.User) (*domain.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "View", user)
	ret0, _ := ret[0].(*domain.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// View indicates an expected call of View.
func (mr *MockCartRepositoryInterfaceMockRecorder) View(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "View", reflect.TypeOf((*MockCartRepositoryInterface)(nil).View), user)
}
